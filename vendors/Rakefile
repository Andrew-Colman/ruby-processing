require 'rake/clean'
require 'shellwords'

JRUBY_VERSION      = "1.7.8"
PROCESSING_VERSION = "2.1"

CLOBBER.include("processing-#{PROCESSING_VERSION}-macosx.zip", "jruby-complete-#{JRUBY_VERSION}.jar")

desc "download, and copy to ruby-processing"
task :default => [:download, :copy_ruby, :copy]

desc "download Processing & JRuby upstream sources"
task :download => ["processing-#{PROCESSING_VERSION}-macosx.zip", "jruby-complete-#{JRUBY_VERSION}.jar"]

file "processing-#{PROCESSING_VERSION}-macosx.zip" do
  sh "wget http://download.processing.org/processing-#{PROCESSING_VERSION}-macosx.zip"
  check_sha1("processing-#{PROCESSING_VERSION}-macosx.zip", "4e51f26c8bd0d13a28cf70f367d4966c396d6079")
end

file "jruby-complete-#{JRUBY_VERSION}.jar" do
  sh "wget http://jruby.org.s3.amazonaws.com/downloads/#{JRUBY_VERSION}/jruby-complete-#{JRUBY_VERSION}.jar"
  check_sha1("jruby-complete-#{JRUBY_VERSION}.jar", "c72460fd292ac290953373c7d5a14a2d98b6dfa1")
end

directory "../lib/ruby"

desc "copy jruby-complete"
task :copy_ruby => ["../lib/ruby"] do
  sh "cp -v jruby-complete-#{JRUBY_VERSION}.jar ../lib/ruby/jruby-complete.jar"
end

directory "../lib/core"

desc "copy libs & jars"
task :copy=> ["../lib/core"] do
  processing_zip = File.expand_path("processing-#{PROCESSING_VERSION}-macosx.zip")
  sh "cd ../lib/core && unzip -qoj #{Shellwords.shellescape(processing_zip)} Processing.app/Contents/Java/core/library/*.jar"
  
  dirs = %w{dxf minim net pdf serial video}
  Dir.chdir("../library/") do
    sh "rm -rf Processing.app/ #{dirs.join(" ")}"
    inside_zip_dirs = dirs.collect { |d| "Processing.app/Contents/Java/modes/java/libraries/#{d}/library/*" }
    sh "unzip -q #{Shellwords.shellescape(processing_zip)} #{inside_zip_dirs.join(" ")}"
    sh "mv Processing.app/Contents/Java/modes/java/libraries/* ."
    sh "rm -r Processing.app/"
  end
end

def check_sha1(filename, expected_hash)
  require "digest/sha1"
  sha1 = Digest::SHA1.new
  File.open(filename, "r") do |f|
    while buf = f.read(4096)
      sha1.update(buf)
    end
  end
  if sha1.hexdigest != expected_hash
    raise "bad sha1 checksum for #{filename} (expected #{expected_hash} got #{sha1.hexdigest})"
  end
end
